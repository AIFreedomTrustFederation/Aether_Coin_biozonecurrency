name: Deploy to AI Freedom Trust DApp

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip running tests'
        required: false
        default: false
        type: boolean

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.skip_tests != 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint || echo "Linting issues found, but continuing deployment"

      - name: Run unit tests
        run: npm test || echo "Some tests failed, but continuing deployment"

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            coverage/
            test-results/
          retention-days: 7

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test]
    if: ${{ success() || github.event.inputs.skip_tests == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Set environment-specific variables
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'production' }}"
          echo "Using $ENVIRONMENT environment configuration"
          
          if [ -f .env.$ENVIRONMENT ]; then
            cp .env.$ENVIRONMENT .env
            echo "NODE_ENV=$ENVIRONMENT" >> .env
            echo "Environment file copied successfully"
          else
            echo "Warning: .env.$ENVIRONMENT not found, using default config"
            cp .env.example .env
            echo "NODE_ENV=$ENVIRONMENT" >> .env
          fi

      - name: Build application
        run: npm run build

      - name: Prepare deployment package
        run: |
          mkdir -p deployment-package
          cp -r dist deployment-package/
          cp server-redirect.js deployment-package/
          cp package.json deployment-package/
          cp .env deployment-package/
          
          # Include scripts directory if it exists
          if [ -d "scripts" ]; then
            cp -r scripts deployment-package/
          fi
          
          # Create deployment archive
          tar -czf aetherion-deploy.tar.gz -C deployment-package .

      - name: Store build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: aetherion-deploy.tar.gz
          retention-days: 3

  database-backup:
    name: Database Backup
    runs-on: ubuntu-latest
    needs: [build]
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add SSH host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p ${{ secrets.DEPLOY_SSH_PORT || 22 }} ${{ secrets.DEPLOY_SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Create database backup
        id: db-backup
        run: |
          echo "Creating database backup before deployment..."
          
          ssh -p ${{ secrets.DEPLOY_SSH_PORT || 22 }} ${{ secrets.DEPLOY_SSH_USER }}@${{ secrets.DEPLOY_SSH_HOST }} "
            # Create backup directory if it doesn't exist
            mkdir -p ~/database_backups
            
            # Generate backup filename with timestamp
            TIMESTAMP=\$(date +%Y%m%d_%H%M%S)
            BACKUP_FILE=~/database_backups/aetherion_\$TIMESTAMP.sql
            
            # Create database backup
            echo 'Creating database backup: \$BACKUP_FILE'
            export PGPASSWORD='${{ secrets.DB_PASSWORD }}'
            pg_dump -h ${{ secrets.DB_HOST || 'localhost' }} -p ${{ secrets.DB_PORT || '5432' }} -U ${{ secrets.DB_USER || 'postgres' }} -F c -b -v -f \$BACKUP_FILE ${{ secrets.DB_NAME || 'aetherion' }}
            
            if [ \$? -eq 0 ]; then
              echo 'Backup completed successfully: \$BACKUP_FILE'
              echo 'backup_file=\$BACKUP_FILE' >> \$GITHUB_OUTPUT
            else
              echo 'Backup failed!'
              exit 1
            fi
            
            # Clean up old backups (keep last 10)
            cd ~/database_backups
            ls -t | grep 'aetherion_' | tail -n +11 | xargs -r rm
            echo 'Cleaned up old backups, keeping the 10 most recent'
          "

  deploy:
    name: Deploy to ${{ github.event.inputs.environment || 'production' }}
    runs-on: ubuntu-latest
    needs: [database-backup]
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: https://${{ github.event.inputs.environment == 'staging' && 'staging.' || '' }}atc.aifreedomtrust.com/dapp
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add SSH host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p ${{ secrets.DEPLOY_SSH_PORT || 22 }} ${{ secrets.DEPLOY_SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Create backup timestamp
        id: backup-timestamp
        run: echo "timestamp=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

      - name: Backup existing deployment
        run: |
          ssh -p ${{ secrets.DEPLOY_SSH_PORT || 22 }} ${{ secrets.DEPLOY_SSH_USER }}@${{ secrets.DEPLOY_SSH_HOST }} "
            if [ -d ~/aetherion ]; then
              echo 'Backing up existing deployment...'
              mkdir -p ~/aetherion_backups
              BACKUP_DIR=~/aetherion_backups/aetherion_backup_${{ steps.backup-timestamp.outputs.timestamp }}
              cp -r ~/aetherion \$BACKUP_DIR
              echo 'Backup completed: \$BACKUP_DIR'
            else
              echo 'No existing deployment found. Creating directory...'
              mkdir -p ~/aetherion
            fi
          "

      - name: Upload package to server
        run: |
          scp -P ${{ secrets.DEPLOY_SSH_PORT || 22 }} aetherion-deploy.tar.gz ${{ secrets.DEPLOY_SSH_USER }}@${{ secrets.DEPLOY_SSH_HOST }}:~/

      - name: Deploy to DApp path
        id: deploy
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'production' }}"
          DOMAIN="${{ github.event.inputs.environment == 'staging' && 'staging.atc.aifreedomtrust.com' || 'atc.aifreedomtrust.com' }}"
          
          ssh -p ${{ secrets.DEPLOY_SSH_PORT || 22 }} ${{ secrets.DEPLOY_SSH_USER }}@${{ secrets.DEPLOY_SSH_HOST }} "
            echo 'Starting deployment for DApp path on $ENVIRONMENT environment...'
            
            # Extract deployment package
            mkdir -p ~/aetherion
            tar -xzf ~/aetherion-deploy.tar.gz -C ~/aetherion
            
            # Install dependencies
            cd ~/aetherion && npm install --production
            
            # Create Nginx configuration specifically for dapp path
            echo 'Creating Nginx configuration for /dapp path...'
            sudo tee /etc/nginx/sites-available/aetherion-dapp.conf > /dev/null << 'EOL'
server {
    listen 80;
    server_name $DOMAIN;

    # Redirect HTTP to HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl http2;
    server_name $DOMAIN;
    
    # SSL configuration
    ssl_certificate /etc/letsencrypt/live/$DOMAIN/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$DOMAIN/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
    
    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:;" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Primary application path at /dapp
    location /dapp {
        proxy_pass http://localhost:3000/dapp;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_cache_bypass \$http_upgrade;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        
        # Add cache control headers for static assets
        location /dapp/assets {
            proxy_pass http://localhost:3000/dapp/assets;
            expires 30d;
            add_header Cache-Control "public, max-age=2592000";
            add_header X-Cache-Status \$upstream_cache_status;
        }
        
        # Ensure API calls aren't cached
        location /dapp/api {
            proxy_pass http://localhost:3000/dapp/api;
            add_header Cache-Control "no-store, no-cache, must-revalidate";
            expires 0;
        }
    }
    
    # Redirect root to /dapp for convenience
    location = / {
        return 301 /dapp;
    }
    
    # For Let's Encrypt
    location ~ /.well-known {
        allow all;
    }
    
    # Enable compression
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_min_length 1000;
}
EOL
            sudo ln -sf /etc/nginx/sites-available/aetherion-dapp.conf /etc/nginx/sites-enabled/
            sudo nginx -t && sudo systemctl reload nginx
            
            # Setup systemd service if it doesn't exist
            if [ ! -f /etc/systemd/system/aetherion.service ]; then
              echo 'Creating systemd service...'
              echo '[Unit]
Description=Aetherion Wallet Server
After=network.target

[Service]
Type=simple
User=${{ secrets.DEPLOY_SSH_USER }}
WorkingDirectory=/home/${{ secrets.DEPLOY_SSH_USER }}/aetherion
ExecStart=/usr/bin/node /home/${{ secrets.DEPLOY_SSH_USER }}/aetherion/server-redirect.js
Restart=on-failure
Environment=PORT=3000
Environment=NODE_ENV=$ENVIRONMENT
Environment=DEPLOY_TARGET=dapp
Environment=BASE_URL=https://$DOMAIN
Environment=DATABASE_URL=${{ secrets.DATABASE_URL }}
Environment=SESSION_SECRET=${{ secrets.SESSION_SECRET }}
Environment=GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
Environment=MATRIX_SERVER_URL=${{ secrets.MATRIX_SERVER_URL }}
Environment=MATRIX_ACCESS_TOKEN=${{ secrets.MATRIX_ACCESS_TOKEN }}
Environment=MATRIX_USER_ID=${{ secrets.MATRIX_USER_ID }}
Environment=MATRIX_DEPLOYMENT_ROOM_ID=${{ secrets.MATRIX_DEPLOYMENT_ROOM_ID }}

[Install]
WantedBy=multi-user.target' | sudo tee /etc/systemd/system/aetherion.service
          
              sudo systemctl daemon-reload
              sudo systemctl enable aetherion.service
            else
              # Update the existing service with environment variables
              sudo sed -i 's/Environment=DEPLOY_TARGET=.*/Environment=DEPLOY_TARGET=dapp/' /etc/systemd/system/aetherion.service
              sudo sed -i 's/Environment=NODE_ENV=.*/Environment=NODE_ENV=$ENVIRONMENT/' /etc/systemd/system/aetherion.service
              sudo sed -i 's/Environment=BASE_URL=.*/Environment=BASE_URL=https:\/\/$DOMAIN/' /etc/systemd/system/aetherion.service
              sudo systemctl daemon-reload
            fi
            
            # Restart the service
            sudo systemctl restart aetherion.service
            
            # Check service status
            echo 'Service status:'
            sudo systemctl status aetherion.service --no-pager
            
            # Wait for the service to start
            sleep 15
            
            # Check if service is running
            if sudo systemctl is-active --quiet aetherion.service; then
              # Verify health endpoint
              HEALTH_CHECK=\$(curl -s http://localhost:3000/dapp/health)
              if [[ \$HEALTH_CHECK == *'\"status\":\"ok\"'* ]]; then
                echo 'Deployment successful: Service is running and health check passed.'
                # Cleanup
                rm ~/aetherion-deploy.tar.gz
                exit 0
              else
                echo 'Deployment failed: Health check failed! Service is running but not responding properly.'
                echo \$HEALTH_CHECK
                exit 1
              fi
            else
              echo 'Deployment failed: Service is not running.'
              exit 1
            fi
          "

      - name: Verify deployment
        if: success() && steps.deploy.outcome == 'success'
        run: |
          echo "Verifying deployment to /dapp path..."
          
          # Set domain based on environment
          DOMAIN="${{ github.event.inputs.environment == 'staging' && 'staging.atc.aifreedomtrust.com' || 'atc.aifreedomtrust.com' }}"
          
          # Wait for application to start
          sleep 15
          
          # Check HTTP status code of the deployed app
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://$DOMAIN/dapp/health || echo "000")
          
          if [ "$HTTP_STATUS" -eq 200 ]; then
            echo "✅ Verification successful! Application is responding with HTTP status: $HTTP_STATUS"
            
            # Get more details from health endpoint
            HEALTH_DETAILS=$(curl -s https://$DOMAIN/dapp/health)
            echo "Health endpoint response: $HEALTH_DETAILS"
            
            # Check performance with simple load test
            echo "Running basic performance test..."
            for i in {1..5}; do
              time curl -s https://$DOMAIN/dapp/health > /dev/null
            done
          else
            echo "⚠️ Warning: Application returned unexpected HTTP status: $HTTP_STATUS"
            exit 1
          fi

      - name: Purge Cloudflare Cache
        if: success() && steps.deploy.outcome == 'success' && secrets.CLOUDFLARE_API_TOKEN != ''
        run: |
          echo "Purging Cloudflare cache..."
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}'

      - name: Rollback on failure
        if: failure() && steps.deploy.outcome == 'failure'
        run: |
          ssh -p ${{ secrets.DEPLOY_SSH_PORT || 22 }} ${{ secrets.DEPLOY_SSH_USER }}@${{ secrets.DEPLOY_SSH_HOST }} "
            echo 'Deployment failed. Rolling back to previous version...'
            
            # Check if backup exists
            BACKUP_DIR=~/aetherion_backups/aetherion_backup_${{ steps.backup-timestamp.outputs.timestamp }}
            if [ -d \$BACKUP_DIR ]; then
              # Stop the service
              sudo systemctl stop aetherion.service
              
              # Remove failed deployment
              rm -rf ~/aetherion
              
              # Restore from backup
              cp -r \$BACKUP_DIR ~/aetherion
              
              # Restart service
              sudo systemctl start aetherion.service
              
              # Verify service is running
              if sudo systemctl is-active --quiet aetherion.service; then
                echo 'Rollback completed successfully!'
              else
                echo 'Warning: Service failed to start after rollback!'
              fi
            else
              echo 'No backup found for rollback!'
            fi
          "

      - name: Notify Slack on success
        if: success() && steps.deploy.outcome == 'success' && secrets.SLACK_WEBHOOK_URL != ''
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: good
          SLACK_ICON: https://github.com/aifreedomtrust.png?size=48
          SLACK_TITLE: 'Deployment Successful! 🚀'
          SLACK_MESSAGE: 'Aetherion has been successfully deployed to ${{ github.event.inputs.environment || "production" }} at https://${{ github.event.inputs.environment == "staging" && "staging." || "" }}atc.aifreedomtrust.com/dapp'
          SLACK_FOOTER: 'Deployed from ${{ github.repository }} | ${{ github.workflow }}'

      - name: Notify Slack on failure
        if: failure() && secrets.SLACK_WEBHOOK_URL != ''
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_CHANNEL: deployments-alerts
          SLACK_COLOR: danger
          SLACK_ICON: https://github.com/aifreedomtrust.png?size=48
          SLACK_TITLE: 'Deployment Failed! ❌'
          SLACK_MESSAGE: 'Aetherion deployment to ${{ github.event.inputs.environment || "production" }} failed. [View logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})'
          SLACK_FOOTER: 'Failed deployment from ${{ github.repository }} | ${{ github.workflow }}'

      - name: Send Matrix Notification
        if: always() && secrets.MATRIX_ACCESS_TOKEN != ''
        run: |
          # Install matrix-js-sdk
          npm install matrix-js-sdk
          
          # Run notification script
          node matrix-notify.js "${{ job.status }}" "${{ github.event.inputs.environment || 'production' }}" "${{ github.run_id }}" "${{ github.repository }}"
        env:
          MATRIX_SERVER_URL: ${{ secrets.MATRIX_SERVER_URL }}
          MATRIX_ACCESS_TOKEN: ${{ secrets.MATRIX_ACCESS_TOKEN }}
          MATRIX_USER_ID: ${{ secrets.MATRIX_USER_ID }}
          MATRIX_DEPLOYMENT_ROOM_ID: ${{ secrets.MATRIX_DEPLOYMENT_ROOM_ID }}