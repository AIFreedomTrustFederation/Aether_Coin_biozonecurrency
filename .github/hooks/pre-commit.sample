#!/bin/bash

# Pre-commit hook to perform quality checks before a commit
# To use: Copy this file to .git/hooks/pre-commit and make it executable

# Set colors for better readability
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${YELLOW}Running pre-commit checks...${NC}"

# Check for TypeScript errors
echo -e "Checking TypeScript types..."
npx tsc --noEmit 2>&1 | grep -v "node_modules"
if [ $? -ne 0 ]; then
  echo -e "${RED}TypeScript check failed! Please fix the above errors before committing.${NC}"
  exit 1
fi
echo -e "${GREEN}TypeScript check passed.${NC}"

# Check for potentially dangerous changes
echo -e "Checking for potentially sensitive content..."

# Look for sensitive file changes
if git diff --cached --name-only | grep -E '\.(env|pem|key|cert|password)$'; then
  echo -e "${RED}Warning: You are trying to commit potentially sensitive files.${NC}"
  echo -e "${RED}Please check these files carefully and make sure they do not contain sensitive data.${NC}"
  echo -e "${YELLOW}To proceed anyway, use the --no-verify flag.${NC}"
  exit 1
fi

# Look for sensitive content in staged changes
if git diff --cached -G"(password|secret|key|token).*['\"].*['\"]" | grep -E "^\\+.*\b(password|secret|key|token).*['\"].*['\"]"; then
  echo -e "${RED}Warning: You are trying to commit code that looks like it might contain sensitive data.${NC}"
  echo -e "${RED}Please check the lines above and make sure they do not contain actual secrets.${NC}"
  echo -e "${YELLOW}Consider using environment variables instead of hardcoded credentials.${NC}"
  echo -e "${YELLOW}To proceed anyway, use the --no-verify flag.${NC}"
  exit 1
fi

# Check for console.log statements
if git diff --cached -G"console\.log" | grep -E "^\\+.*console\.log"; then
  echo -e "${YELLOW}Warning: You are committing code with console.log statements.${NC}"
  echo -e "${YELLOW}Consider removing them or replacing with a proper logging system.${NC}"
  read -p "Proceed with commit anyway? (y/n) " -n 1 -r
  echo ""
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    exit 1
  fi
fi

# Run automated backup
echo -e "Creating automatic backup..."
./backup.sh > /dev/null
if [ $? -ne 0 ]; then
  echo -e "${YELLOW}Warning: Automatic backup failed. Consider running backup manually.${NC}"
else
  echo -e "${GREEN}Automatic backup created successfully.${NC}"
fi

echo -e "${GREEN}All pre-commit checks passed!${NC}"
exit 0