name: Deploy to AI Freedom Trust DApp

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    name: Build and Deploy to atc.aifreedomtrust.com/dapp
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Prepare deployment package
        run: |
          tar -czf aetherion-deploy.tar.gz \
            dist \
            server-redirect.js \
            package.json \
            scripts/fractalcoin-filecoin-bridge.js

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add SSH host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p ${{ secrets.DEPLOY_SSH_PORT || 22 }} ${{ secrets.DEPLOY_SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Create backup timestamp
        id: backup-timestamp
        run: echo "timestamp=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

      - name: Backup existing deployment
        run: |
          ssh -p ${{ secrets.DEPLOY_SSH_PORT || 22 }} ${{ secrets.DEPLOY_SSH_USER }}@${{ secrets.DEPLOY_SSH_HOST }} "
            if [ -d ~/aetherion ]; then
              echo 'Backing up existing deployment...'
              mkdir -p ~/aetherion_backups
              BACKUP_DIR=~/aetherion_backups/aetherion_backup_${{ steps.backup-timestamp.outputs.timestamp }}
              cp -r ~/aetherion \$BACKUP_DIR
              echo 'Backup completed: \$BACKUP_DIR'
            else
              echo 'No existing deployment found. Creating directory...'
              mkdir -p ~/aetherion
            fi
          "

      - name: Upload package to server
        run: |
          scp -P ${{ secrets.DEPLOY_SSH_PORT || 22 }} aetherion-deploy.tar.gz ${{ secrets.DEPLOY_SSH_USER }}@${{ secrets.DEPLOY_SSH_HOST }}:~/

      - name: Deploy to DApp path
        id: deploy
        run: |
          ssh -p ${{ secrets.DEPLOY_SSH_PORT || 22 }} ${{ secrets.DEPLOY_SSH_USER }}@${{ secrets.DEPLOY_SSH_HOST }} "
            echo 'Starting deployment for DApp path...'
            
            # Extract deployment package
            mkdir -p ~/aetherion
            tar -xzf ~/aetherion-deploy.tar.gz -C ~/aetherion
            
            # Install dependencies
            cd ~/aetherion && npm install --production
            
            # Create Nginx configuration specifically for dapp path
            echo 'Creating Nginx configuration for /dapp path...'
            sudo tee /etc/nginx/sites-available/aetherion-dapp.conf > /dev/null << 'EOL'
server {
    listen 80;
    server_name atc.aifreedomtrust.com;

    location /dapp {
        proxy_pass http://127.0.0.1:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_cache_bypass \$http_upgrade;
    }
}
EOL
            sudo ln -sf /etc/nginx/sites-available/aetherion-dapp.conf /etc/nginx/sites-enabled/
            sudo nginx -t && sudo systemctl reload nginx
            
            # Setup systemd service if it doesn't exist
            if [ ! -f /etc/systemd/system/aetherion.service ]; then
              echo 'Creating systemd service...'
              echo '[Unit]
Description=Aetherion Wallet Server
After=network.target

[Service]
Type=simple
User=${{ secrets.DEPLOY_SSH_USER }}
WorkingDirectory=/home/${{ secrets.DEPLOY_SSH_USER }}/aetherion
ExecStart=/usr/bin/node /home/${{ secrets.DEPLOY_SSH_USER }}/aetherion/server-redirect.js
Restart=on-failure
Environment=PORT=3000
Environment=NODE_ENV=production
Environment=DEPLOY_TARGET=dapp
Environment=BASE_URL=https://atc.aifreedomtrust.com
Environment=DATABASE_URL=${{ secrets.DATABASE_URL }}
Environment=SESSION_SECRET=${{ secrets.SESSION_SECRET }}
Environment=GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}

[Install]
WantedBy=multi-user.target' | sudo tee /etc/systemd/system/aetherion.service
          
              sudo systemctl daemon-reload
              sudo systemctl enable aetherion.service
            else
              # Update the existing service with dapp target
              sudo sed -i 's/Environment=DEPLOY_TARGET=.*/Environment=DEPLOY_TARGET=dapp/' /etc/systemd/system/aetherion.service
              sudo systemctl daemon-reload
            fi
            
            # Restart the service
            sudo systemctl restart aetherion.service
            
            # Check service status
            echo 'Service status:'
            sudo systemctl status aetherion.service --no-pager
            
            # Wait for the service to start
            sleep 10
            
            # Check if service is running
            if sudo systemctl is-active --quiet aetherion.service; then
              echo 'Deployment successful: Service is running.'
              # Cleanup
              rm ~/aetherion-deploy.tar.gz
              exit 0
            else
              echo 'Deployment failed: Service is not running.'
              exit 1
            fi
          "

      - name: Verify deployment
        if: success() && steps.deploy.outcome == 'success'
        run: |
          echo "Verifying deployment to /dapp path..."
          
          # Wait for application to start
          sleep 15
          
          # Check HTTP status code of the deployed app
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://atc.aifreedomtrust.com/dapp/health || echo "000")
          
          if [ "$HTTP_STATUS" -eq 200 ]; then
            echo "✅ Verification successful! Application is responding with HTTP status: $HTTP_STATUS"
          else
            echo "⚠️ Warning: Application returned unexpected HTTP status: $HTTP_STATUS"
          fi

      - name: Rollback on failure
        if: failure() && steps.deploy.outcome == 'failure'
        run: |
          ssh -p ${{ secrets.DEPLOY_SSH_PORT || 22 }} ${{ secrets.DEPLOY_SSH_USER }}@${{ secrets.DEPLOY_SSH_HOST }} "
            echo 'Deployment failed. Rolling back to previous version...'
            
            # Check if backup exists
            BACKUP_DIR=~/aetherion_backups/aetherion_backup_${{ steps.backup-timestamp.outputs.timestamp }}
            if [ -d \$BACKUP_DIR ]; then
              # Remove failed deployment
              rm -rf ~/aetherion
              
              # Restore from backup
              cp -r \$BACKUP_DIR ~/aetherion
              
              # Restart service
              sudo systemctl restart aetherion.service
              
              echo 'Rollback completed successfully!'
            else
              echo 'No backup found for rollback!'
            fi
          "

      - name: Notify on success
        if: success()
        run: |
          echo "✅ Successfully deployed Aetherion to atc.aifreedomtrust.com/dapp"
          echo "Deployment is now live!"