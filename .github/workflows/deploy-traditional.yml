name: Deploy Aetherion to Traditional Server

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy-traditional:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
      
      # Copy server-redirect.js to dist directory
      - name: Prepare server files
        run: |
          cp server-redirect.js dist/
          echo "NODE_ENV=production" > dist/.env
          echo "PORT=3000" >> dist/.env
      
      # Create necessary deployment files
      - name: Prepare deployment package
        run: |
          tar -czf deploy-package.tar.gz dist package.json
      
      # Set up SSH key from secrets
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DEPLOY_SSH_HOST }} >> ~/.ssh/known_hosts
      
      # Deploy to server via SSH
      - name: Deploy to server
        run: |
          scp deploy-package.tar.gz ${{ secrets.DEPLOY_SSH_USER }}@${{ secrets.DEPLOY_SSH_HOST }}:~/
          ssh ${{ secrets.DEPLOY_SSH_USER }}@${{ secrets.DEPLOY_SSH_HOST }} << 'EOF'
            echo "Starting deployment process..."
            
            # Create backup of existing deployment if it exists
            if [ -d ~/aetherion ]; then
              echo "Creating backup of existing deployment..."
              BACKUP_DIR=~/aetherion_backup_$(date +%Y%m%d%H%M%S)
              mkdir -p $BACKUP_DIR
              cp -r ~/aetherion/* $BACKUP_DIR/
              echo "Backup created at $BACKUP_DIR"
            fi
            
            # Extract new deployment
            echo "Extracting new deployment package..."
            mkdir -p ~/aetherion
            tar -xzf deploy-package.tar.gz -C ~/aetherion
            cd ~/aetherion
            
            # Install production dependencies
            echo "Installing production dependencies..."
            npm install --production --no-optional
            
            # Create systemd service file if it doesn't exist
            if [ ! -f /etc/systemd/system/aetherion.service ]; then
              echo "Setting up systemd service..."
              sudo tee /etc/systemd/system/aetherion.service > /dev/null << 'SERVICEEOF'
          [Unit]
          Description=Aetherion UI Wallet
          After=network.target

          [Service]
          Type=simple
          User=$USER
          WorkingDirectory=$HOME/aetherion
          ExecStart=/usr/bin/node $HOME/aetherion/dist/server-redirect.js
          Restart=on-failure
          RestartSec=10
          Environment=PORT=3000
          Environment=NODE_ENV=production

          [Install]
          WantedBy=multi-user.target
          SERVICEEOF

              sudo systemctl daemon-reload
              sudo systemctl enable aetherion
            fi
            
            # Restart the service
            echo "Restarting Aetherion service..."
            sudo systemctl restart aetherion
            sleep 5
            
            # Check if service is running
            if sudo systemctl is-active --quiet aetherion; then
              echo "Aetherion service is running successfully."
            else
              echo "WARNING: Aetherion service failed to start. Checking logs..."
              sudo journalctl -u aetherion --no-pager -n 50
            fi
            
            # Set up nginx config if it doesn't exist
            if [ ! -f /etc/nginx/sites-available/aetherion ]; then
              echo "Setting up Nginx configuration..."
              sudo tee /etc/nginx/sites-available/aetherion > /dev/null << 'NGINXEOF'
          server {
              listen 80;
              listen [::]:80;
              server_name atc.aifreedomtrust.com www.atc.aifreedomtrust.com;

              # For Let's Encrypt
              location ~ /.well-known {
                  root /var/www/html;
                  allow all;
              }

              # Redirect all HTTP traffic to HTTPS
              location / {
                  return 301 https://$host$request_uri;
              }
          }

          server {
              listen 443 ssl http2;
              listen [::]:443 ssl http2;
              server_name atc.aifreedomtrust.com www.atc.aifreedomtrust.com;

              # SSL configuration
              ssl_certificate /etc/letsencrypt/live/atc.aifreedomtrust.com/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/atc.aifreedomtrust.com/privkey.pem;
              ssl_trusted_certificate /etc/letsencrypt/live/atc.aifreedomtrust.com/chain.pem;

              # SSL settings
              ssl_protocols TLSv1.2 TLSv1.3;
              ssl_prefer_server_ciphers on;
              ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';
              ssl_session_timeout 1d;
              ssl_session_cache shared:SSL:50m;
              ssl_stapling on;
              ssl_stapling_verify on;
              
              # HSTS (comment out if testing)
              add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
              
              # Other security headers
              add_header X-Content-Type-Options "nosniff" always;
              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-XSS-Protection "1; mode=block" always;
              add_header Referrer-Policy "strict-origin-when-cross-origin" always;

              # Primary application path at /dapp
              location /dapp {
                  proxy_pass http://localhost:3000/dapp;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
                  proxy_cache_bypass \$http_upgrade;
                  proxy_read_timeout 90;
              }

              # Secondary application path at /wallet (legacy support)
              location /wallet {
                  proxy_pass http://localhost:3000/wallet;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
                  proxy_cache_bypass \$http_upgrade;
                  proxy_read_timeout 90;
              }

              # Health check endpoint
              location /health {
                  proxy_pass http://localhost:3000/health;
                  proxy_http_version 1.1;
                  proxy_set_header Host \$host;
                  proxy_cache_bypass \$http_upgrade;
              }

              # Redirect root to /dapp
              location = / {
                  return 301 /dapp;
              }

              # For Let's Encrypt
              location ~ /.well-known {
                  root /var/www/html;
                  allow all;
              }
          }
          NGINXEOF

              sudo ln -sf /etc/nginx/sites-available/aetherion /etc/nginx/sites-enabled/
              
              # Check Nginx config
              echo "Checking Nginx configuration..."
              sudo nginx -t
              
              # Restart Nginx
              echo "Restarting Nginx..."
              sudo systemctl restart nginx
              
              # Setup SSL with Let's Encrypt if not already configured
              if [ ! -d /etc/letsencrypt/live/atc.aifreedomtrust.com ]; then
                echo "Setting up SSL with Let's Encrypt..."
                sudo certbot --nginx -d atc.aifreedomtrust.com -d www.atc.aifreedomtrust.com --non-interactive --agree-tos --email admin@aifreedomtrust.com
              else
                echo "SSL certificates already exist. Checking for renewal..."
                sudo certbot renew --dry-run
              fi
            else
              # Just restart Nginx if the config already exists
              echo "Nginx configuration already exists. Restarting Nginx..."
              sudo systemctl restart nginx
            fi
            
            # Clean up
            echo "Cleaning up..."
            rm ~/deploy-package.tar.gz
            
            echo "Deployment completed successfully!"
          EOF
      
      # Verify deployment
      - name: Verify deployment
        run: |
          echo "Waiting for application to start up completely..."
          sleep 10
          
          # Check if the site is accessible
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://atc.aifreedomtrust.com/dapp || echo "Failed")
          
          if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "302" ]; then
            echo "Verification successful! Application is responding with HTTP status: $HTTP_STATUS"
          else
            echo "Warning: Application returned unexpected HTTP status: $HTTP_STATUS"
            # We don't fail the workflow here, just warn
          fi