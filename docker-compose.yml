version: '3.8'

services:
  api-gateway:
    build:
      context: ./api-gateway
    image: ${DOCKER_HUB_USERNAME:-scrollkeeper}/scroll-keeper-api-gateway:latest
    container_name: scroll-keeper-api-gateway
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - AUTH_SERVICE_URL=http://auth-service:5001
      - EXTRACTION_SERVICE_URL=http://extraction-service:5002
      - STORAGE_SERVICE_URL=http://storage-service:5003
      - CORS_ORIGIN=https://scrollkeeper.example.com
    depends_on:
      - auth-service
      - extraction-service
      - storage-service
    networks:
      - scroll-keeper-network

  auth-service:
    build:
      context: ./auth-service
    image: ${DOCKER_HUB_USERNAME:-scrollkeeper}/scroll-keeper-auth-service:latest
    container_name: scroll-keeper-auth-service
    restart: unless-stopped
    ports:
      - "5001:5001"
    environment:
      - NODE_ENV=production
      - PORT=5001
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-postgres}@db:5432/scrollkeeper
      - JWT_SECRET=${JWT_SECRET}
      - TOKEN_EXPIRATION=86400
      - CORS_ORIGIN=https://scrollkeeper.example.com
    depends_on:
      - db
    networks:
      - scroll-keeper-network

  extraction-service:
    build:
      context: ./extraction-service
    image: ${DOCKER_HUB_USERNAME:-scrollkeeper}/scroll-keeper-extraction-service:latest
    container_name: scroll-keeper-extraction-service
    restart: unless-stopped
    ports:
      - "5002:5002"
    environment:
      - NODE_ENV=production
      - PORT=5002
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - STORAGE_SERVICE_URL=http://storage-service:5003
      - CORS_ORIGIN=https://scrollkeeper.example.com
    networks:
      - scroll-keeper-network

  storage-service:
    build:
      context: ./storage-service
    image: ${DOCKER_HUB_USERNAME:-scrollkeeper}/scroll-keeper-storage-service:latest
    container_name: scroll-keeper-storage-service
    restart: unless-stopped
    ports:
      - "5003:5003"
    environment:
      - NODE_ENV=production
      - PORT=5003
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-postgres}@db:5432/scrollkeeper
      - CORS_ORIGIN=https://scrollkeeper.example.com
    depends_on:
      - db
    networks:
      - scroll-keeper-network

  ui-service:
    build:
      context: ./ui-service
    image: ${DOCKER_HUB_USERNAME:-scrollkeeper}/scroll-keeper-ui-service:latest
    container_name: scroll-keeper-ui-service
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./ssl:/etc/nginx/ssl
      - ./nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - api-gateway
    networks:
      - scroll-keeper-network

  db:
    image: postgres:14-alpine
    container_name: scroll-keeper-db
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=scrollkeeper
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - scroll-keeper-network

  monitoring:
    image: prom/prometheus:latest
    container_name: scroll-keeper-monitoring
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    networks:
      - scroll-keeper-network

  grafana:
    image: grafana/grafana:latest
    container_name: scroll-keeper-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    depends_on:
      - monitoring
    networks:
      - scroll-keeper-network

volumes:
  postgres-data:
  prometheus-data:
  grafana-data:

networks:
  scroll-keeper-network:
    driver: bridge